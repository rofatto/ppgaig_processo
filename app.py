import streamlit as st
import pandas as pd
from io import BytesIO
from PyPDF2 import PdfMerger, PdfReader
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet

st.set_page_config(page_title="Formul√°rio PPGAIG", layout="wide")

# Abas do formul√°rio
aba1, aba2, aba3 = st.tabs(["Inscri√ß√£o", "Sele√ß√£o da Linha de Pesquisa", "Pontua√ß√£o do Curr√≠culo"])

# Inscri√ß√£o
with aba1:
    st.header("Inscri√ß√£o")
    nome = st.text_input("Nome completo")
    cpf = st.text_input("CPF")
    sexo = st.radio("Sexo", ["Masculino", "Feminino", "Prefiro n√£o identificar"])
    modalidade = st.radio("Modalidade", ["Regular", "Especial"])
    quota = st.selectbox("Tipo de Quota", ["Ampla Concorr√™ncia", "Pretos, Pardos, Ind√≠genas", "Pessoas com Defici√™ncia", "Pessoas sob pol√≠ticas humanit√°rias no Brasil"])

    identidade_pdf = st.file_uploader("Documento de identidade (com CPF ou RG e CPF separados, mas mesclados em um √∫nico PDF) *", type="pdf")
    registro_civil_pdf = st.file_uploader("Registro civil (nascimento ou casamento) *", type="pdf")
    quitacao_pdf = st.file_uploader("Comprovante de quita√ß√£o eleitoral *", type="pdf")
    diploma_pdf = st.file_uploader("Diploma ou Certificado de Conclus√£o da Gradua√ß√£o *", type="pdf")

    reservista_pdf = None
    if sexo == "Masculino":
        reservista_pdf = st.file_uploader("Certificado de reservista *", type="pdf")

    quota_pdf = None
    if quota != "Ampla Concorr√™ncia":
        quota_pdf = st.file_uploader("Comprovante para quotas *", type="pdf")

# Sele√ß√£o da Linha de Pesquisa
with aba2:
    st.header("Sele√ß√£o da Linha de Pesquisa")
    email = st.text_input("Email")
    from datetime import date

    data_nascimento = st.date_input("Data de Nascimento (ANO/M√äS/DIA)", value=date(1990, 1, 1), min_value=date(1900, 1, 1), max_value=date.today())
    ano_conclusao = st.number_input("Ano de Conclus√£o do Curso de Gradua√ß√£o", 1950, 2100)

    linha = st.radio("Selecione apenas 1 (uma) linha de pesquisa:", ["Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais", "Linha 2: Sistemas integrados de produ√ß√£o vegetal"])

    st.markdown("""
    üìù **Classifique as sub√°reas por ordem de prefer√™ncia:**
    - Utilize os bot√µes ‚Äú+‚Äù e ‚Äú‚Äì‚Äù para atribuir uma ordem de **1 (maior interesse)** a **5 (menor interesse)** ‚Äì *caso tenha selecionado a Linha 1*.
    - Caso tenha selecionado a Linha 2, a ordem vai de **1 (maior interesse) a 13 (menor interesse)**.
    - Cada n√∫mero de ordem s√≥ pode ser usado uma vez.
    """)

    subareas_l1 = [
        "Sensoriamento Remoto de Sistemas Agr√≠colas",
        "Desenvolvimento de sistemas de mapeamento m√≥vel. Utiliza√ß√£o de aeronaves remotamente pilotadas na Fitotecnia",
        "Sistemas computacionais inteligentes na agricultura e informa√ß√µes geoespaciais",
        "Posicionamento por GNSS. Modelagem e an√°lise de dados geoespaciais. Controle de qualidade de informa√ß√µes geoespaciais",
        "Sensores Aplicados a Agricultura de Precis√£o"
    ]

    subareas_l2 = [
        "Biotecnologia na agricultura",
        "Recursos florestais",
        "Nutri√ß√£o, Manejo e cultura de tecidos em hortali√ßas e plantas medicinais",
        "Micologia Aplicada. Patologia Florestal. Patologia de Sementes. Sensoriamento remoto aplicado √† Patologia Florestal",
        "Nutri√ß√£o mineral e metabolismo de plantas",
        "Manejo integrado de plantas daninhas. Uso de herbicidas na Agricultura. Sistemas de informa√ß√£o para controle de plantas",
        "Microbiologia agr√≠cola",
        "Controle biol√≥gico de doen√ßas de plantas. Controle biol√≥gico de plantas daninhas. Sensoriamento remoto aplicado √† Fitopatologia",
        "Mecaniza√ß√£o agr√≠cola. Tecnologia de aplica√ß√£o de precis√£o",
        "Manejo da √°gua em sistemas agr√≠colas irrigados",
        "Melhoramento gen√©tico de hortali√ßas e fenotipagem de alto desempenho",
        "Entomologia agr√≠cola: manejo integrado, controle biol√≥gico, controle microbiano",
        "Tecnologias aplicadas √† cafeicultura"
    ]

    subareas = subareas_l1 if "Linha 1" in linha else subareas_l2

    ordem_pref = []
    ordem_usada = set()
    for sub in subareas:
        ordem = st.number_input(sub, 1, len(subareas), key=f"sub_{sub}")
        if ordem in ordem_usada:
            st.warning(f"Ordem {ordem} j√° usada. Escolha uma ordem √∫nica para cada sub√°rea.")
        ordem_usada.add(ordem)
        ordem_pref.append(ordem)

# Pontua√ß√£o do Curr√≠culo
with aba3:
    st.header("Pontua√ß√£o do Curr√≠culo")

    st.markdown("üìù **Aten√ß√£o:** Os comprovantes de um dado item devem ser enviados em **um √∫nico arquivo PDF**.")
    historico_media = st.number_input("M√©dia aritm√©tica das disciplinas cursadas na gradua√ß√£o:", min_value=0.0, max_value=10.0, step=0.01, format="%.2f")
    historico_pdf = st.file_uploader("Anexe o Hist√≥rico Escolar (PDF obrigat√≥rio)", type="pdf", key="historico")

    itens = [
        ("1.1 Artigo com percentil ‚â• 75", "Informar a quantidade de artigos. Pontua√ß√£o: 10,00 pontos/artigo. Anexar o artigo completo com nome dos autores, peri√≥dico, ano, volume, n√∫mero e p√°ginas. Artigos em prelo ou first view n√£o s√£o aceitos.", 10.0, 0),
        ("1.2 Artigo com 50 ‚â§ percentil < 75", "Informar a quantidade de artigos. Pontua√ß√£o: 8,00 pontos/artigo.", 8.0, 0),
        ("1.3 Artigo com 25 ‚â§ percentil < 50", "Informar a quantidade de artigos. Pontua√ß√£o: 6,00 pontos/artigo. Pontua√ß√£o m√°xima: 12,00 pontos.", 6.0, 12.0),
        ("1.4 Artigo com percentil < 25", "Informar a quantidade de artigos. Pontua√ß√£o: 2,00 pontos/artigo. Pontua√ß√£o m√°xima: 4,00 pontos.", 2.0, 4.0),
        ("1.5 Artigo sem percentil", "Informar a quantidade de artigos. Pontua√ß√£o: 1,00 ponto/artigo. Pontua√ß√£o m√°xima: 2,00 pontos.", 1.0, 2.0),
        ("2.1 Trabalhos completos em eventos (‚â•2p)", "Informar a quantidade. Pontua√ß√£o: 0,6 ponto/unidade. Anexar trabalho, nome do evento, ano, t√≠tulo, autores e numera√ß√£o das p√°ginas.", 0.6, 3.0),
        ("2.2 Resumos publicados (<2p)", "Informar a quantidade. Pontua√ß√£o: 0,3 ponto/unidade. Anexar certificado de apresenta√ß√£o.", 0.3, 1.5),
        ("3.1 Cap√≠tulo de livro ou boletim t√©cnico", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto/unidade. Anexar capa, ficha catalogr√°fica, autores, ano e p√°ginas.", 1.0, 4.0),
        ("3.2 Livro na √≠ntegra", "Informar a quantidade. Pontua√ß√£o: 4,0 pontos/unidade. Anexar os mesmos elementos do item anterior.", 4.0, 4.0),
        ("4. Curso de especializa√ß√£o", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto/unidade. Curso com no m√≠nimo 320h nas √°reas de Ci√™ncias Agr√°rias ou Geoci√™ncias. Anexar certificado contendo institui√ß√£o, nome do curso, carga hor√°ria e ano de conclus√£o.", 1.0, 1.0),
        ("5. Monitoria de disciplina", "Informar a quantidade. Pontua√ß√£o: 0,6 ponto por semestre letivo (m√≠nimo 2 meses). Anexar comprovante com per√≠odo e ano, emitido pela Pr√≥-reitoria ou √≥rg√£o equivalente.", 0.6, 2.4),
        ("6.1 Inicia√ß√£o cient√≠fica com bolsa", "Informar a quantidade de meses. Pontua√ß√£o: 0,4 ponto/m√™s. Anexar comprovante com per√≠odo e ano, emitido por Pr√≥-reitoria ou ag√™ncia de fomento.", 0.4, 16.0),
        ("6.2 Inicia√ß√£o cient√≠fica sem bolsa", "Informar a quantidade de meses. Pontua√ß√£o: 0,2 ponto/m√™s. Mesma orienta√ß√£o de comprova√ß√£o do item anterior.", 0.2, 8.0),
        ("7.1 Software/Aplicativo", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto/unidade. Anexar registro no INPI.", 1.0, 5.0),
        ("7.2 Patente", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto/unidade. Anexar registro no INPI.", 1.0, 5.0),
        ("7.3 Registro de cultivar", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto/unidade. Anexar registro no MAPA.", 1.0, 5.0),
        ("8. Orienta√ß√£o de alunos", "Informar a quantidade. Pontua√ß√£o: 1,0 ponto por orienta√ß√£o conclu√≠da. Anexar formaliza√ß√£o da orienta√ß√£o ou carta do coordenador de curso.", 1.0, 2.0),
        ("9. Participa√ß√£o em bancas", "Informar a quantidade. Pontua√ß√£o: 0,25 ponto/unidade. Anexar comprova√ß√£o da composi√ß√£o da banca, t√≠tulo do trabalho e ano da defesa.", 0.25, 1.0),
        ("10.1 Doc√™ncia no Ensino Superior", "Informar a quantidade de semestres. Pontua√ß√£o: 1,0 ponto/semestre. Anexar certificado ou registro em carteira de trabalho.", 1.0, 8.0),
        ("10.2 Doc√™ncia no Fundamental/M√©dio", "Informar a quantidade de semestres. Pontua√ß√£o: 0,3 ponto/semestre.", 0.3, 3.0),
        ("10.3 Atua√ß√£o em EAD", "Informar a quantidade de semestres. Pontua√ß√£o: 0,2 ponto/semestre.", 0.2, 2.0),
        ("10.4 Atividades profissionais relacionadas", "Informar a quantidade de semestres. Pontua√ß√£o: 0,25 ponto/semestre. N√£o ser√£o pontuadas atividades de est√°gio. Anexar certificado ou registro em carteira de trabalho.", 0.25, 4.0)
    ]

    comprovantes = {}
    dados = []

    for item, descricao, ponto, maximo in itens:
        st.markdown(f"**{item}**")
        st.markdown(f"‚ÑπÔ∏è {descricao}")
        qtd = st.number_input(f"Quantidade de '{item}'", min_value=0, step=1)
        comprovantes[item] = st.file_uploader(f"Anexe o comprovante √∫nico em PDF para '{item}'", type="pdf", key=f"file_{item}")
        if qtd > 0 and comprovantes[item] is None:
            st.warning(f"Voc√™ preencheu o item '{item}' com quantidade {qtd}, mas n√£o anexou o comprovante correspondente. Isso √© obrigat√≥rio.")
        total = min(qtd * ponto, maximo) if maximo > 0 else qtd * ponto
        dados.append((item, qtd, total))

    pontuacao_total = sum(total for _, _, total in dados)

    st.subheader(f"üìà Pontua√ß√£o Final: {pontuacao_total:.2f} pontos")

    if st.button("üìÑ Gerar Relat√≥rio Final em PDF"):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=40, leftMargin=40, topMargin=40, bottomMargin=40)
        styles = getSampleStyleSheet()
        elements = []

        # Se√ß√£o 1: Inscri√ß√£o
        elements.append(Paragraph("Inscri√ß√£o", styles['Title']))
        elements.append(Spacer(1, 12))
        elements += [
            Paragraph(f"<b>Nome:</b> {nome}", styles['Normal']),
            Paragraph(f"<b>CPF:</b> {cpf}", styles['Normal']),
            Paragraph(f"<b>Sexo:</b> {sexo}", styles['Normal']),
            Paragraph(f"<b>Modalidade:</b> {modalidade}", styles['Normal']),
            Paragraph(f"<b>Quota:</b> {quota}", styles['Normal']),
        ]
        elements.append(PageBreak())

        # Se√ß√£o 2: Linha de Pesquisa
        elements.append(Paragraph("Sele√ß√£o da Linha de Pesquisa", styles['Title']))
        elements.append(Spacer(1, 12))
        elements += [
            Paragraph(f"<b>Email:</b> {email}", styles['Normal']),
            Paragraph(f"<b>Data de Nascimento:</b> {data_nascimento.strftime('%d/%m/%Y')}", styles['Normal']),
            Paragraph(f"<b>Ano de Conclus√£o:</b> {ano_conclusao}", styles['Normal']),
            Paragraph(f"<b>Linha Selecionada:</b> {linha}", styles['Normal']),
        ]

        # Sub√°reas Selecionadas
        elements.append(Spacer(1, 12))
        elements.append(Paragraph("<b>Sub√°reas Selecionadas (ordem de prefer√™ncia):</b>", styles['Normal']))
        subareas = subareas_l1 if "Linha 1" in linha else subareas_l2
        ordem_subareas = sorted(zip(ordem_pref, subareas), key=lambda x: x[0])
        for ordem, subarea in ordem_subareas:
            elements.append(Paragraph(f"{ordem} - {subarea}", styles['Normal']))

        elements.append(PageBreak())

        # Se√ß√£o 3: Pontua√ß√£o
        elements.append(Paragraph("Pontua√ß√£o do Curr√≠culo", styles['Title']))
        elements.append(Spacer(1, 12))
        for item, qtd, total in dados:
            elements.append(Paragraph(f"{item}: {qtd} unidades - Total: {total:.2f} pontos", styles['Normal']))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"<b>M√©dia do Hist√≥rico Escolar:</b> {historico_media:.2f}", styles['Normal']))
        elements.append(Paragraph(f"<b>Pontua√ß√£o Total do Curr√≠culo:</b> {pontuacao_total:.2f} pontos", styles['Normal']))

        doc.build(elements)

        buffer.seek(0)
        merger = PdfMerger()
        merger.append(PdfReader(buffer))

        for label, pdf_file in [
            ("Documento de identidade", identidade_pdf),
            ("Registro civil", registro_civil_pdf),
            ("Comprovante de quita√ß√£o eleitoral", quitacao_pdf),
            ("Diploma ou Certificado", diploma_pdf),
            ("Certificado de reservista", reservista_pdf),
            ("Comprovante de quota", quota_pdf),
            ("Hist√≥rico Escolar", historico_pdf)
        ]:
            if pdf_file is not None:
                capa_buffer = BytesIO()
                capa_doc = SimpleDocTemplate(capa_buffer, pagesize=A4)
                capa_elements = [Spacer(1, 250), Paragraph(label, styles['Title'])]
                capa_doc.build(capa_elements)
                capa_buffer.seek(0)
                merger.append(PdfReader(capa_buffer))
                pdf_file.seek(0)
                merger.append(PdfReader(pdf_file))

        for item, qtd, _ in dados:
            if qtd > 0 and comprovantes[item] is not None:
                capa_buffer = BytesIO()
                capa_doc = SimpleDocTemplate(capa_buffer, pagesize=A4)
                capa_elements = [Spacer(1, 250), Paragraph(f"Comprovante: {item}", styles['Title'])]
                capa_doc.build(capa_elements)
                capa_buffer.seek(0)
                merger.append(PdfReader(capa_buffer))
                comprovantes[item].seek(0)
                merger.append(PdfReader(comprovantes[item]))

        final_output = BytesIO()
        merger.write(final_output)
        merger.close()

        st.success("‚úÖ PDF gerado com sucesso!")
        st.download_button("‚¨áÔ∏è Baixar PDF Consolidado", final_output.getvalue(), file_name="formulario_ppgaig.pdf", mime="application/pdf")
