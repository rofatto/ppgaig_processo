import streamlit as st
import pandas as pd
from io import BytesIO
from PyPDF2 import PdfMerger, PdfReader
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle, KeepTogether
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

st.set_page_config(page_title="Formul√°rio PPGAIG", layout="wide")

# Abas
aba1, aba2, aba3 = st.tabs(["Inscri√ß√£o", "Sele√ß√£o da Linha de Pesquisa", "Pontua√ß√£o do Curr√≠culo"])

# Inscri√ß√£o
with aba1:
    st.header("Inscri√ß√£o")
    nome = st.text_input("Nome completo")
    cpf = st.text_input("CPF")
    sexo = st.radio("Sexo", ["Masculino", "Feminino", "Prefiro n√£o identificar"])
    modalidade = st.radio("Modalidade", ["Regular", "Especial"])
    quota = st.selectbox("Tipo de Quota", ["Ampla Concorr√™ncia", "Pretos, Pardos, Ind√≠genas", "Pessoas com Defici√™ncia", "Pessoas sob pol√≠ticas humanit√°rias no Brasil"])

    identidade_pdf = st.file_uploader("Documento de identidade *", type="pdf")
    registro_civil_pdf = st.file_uploader("Registro civil *", type="pdf")
    quitacao_pdf = st.file_uploader("Comprovante de quita√ß√£o eleitoral *", type="pdf")
    diploma_pdf = st.file_uploader("Diploma ou Certificado *", type="pdf")

    reservista_pdf = None
    if sexo == "Masculino":
        reservista_pdf = st.file_uploader("Certificado de reservista *", type="pdf")

    quota_pdf = None
    if quota != "Ampla Concorr√™ncia":
        quota_pdf = st.file_uploader("Comprovante para quotas *", type="pdf")

# Sele√ß√£o da Linha de Pesquisa
with aba2:
    st.header("Sele√ß√£o da Linha de Pesquisa")
    email = st.text_input("Email")
    from datetime import date
    data_nascimento = st.date_input("Data de Nascimento", value=date(1990,1,1))
    ano_conclusao = st.number_input("Ano de Conclus√£o", 1950, 2100)

    linha = st.radio("Linha de Pesquisa:", ["Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais", "Linha 2: Sistemas integrados de produ√ß√£o vegetal"])

    subareas_l1 = [
        "Sensoriamento Remoto de Sistemas Agr√≠colas",
        "Desenvolvimento de sistemas de mapeamento m√≥vel. Utiliza√ß√£o de aeronaves remotamente pilotadas na Fitotecnia",
        "Sistemas computacionais inteligentes na agricultura e informa√ß√µes geoespaciais",
        "Posicionamento por GNSS. Modelagem e an√°lise de dados geoespaciais. Controle de qualidade de informa√ß√µes geoespaciais",
        "Sensores Aplicados a Agricultura de Precis√£o"
    ]
    subareas_l2 = [
        "Biotecnologia na agricultura", "Recursos florestais", "Nutri√ß√£o, Manejo e cultura de tecidos em hortali√ßas e plantas medicinais",
        "Micologia Aplicada. Patologia Florestal. Patologia de Sementes. Sensoriamento remoto aplicado √† Patologia Florestal",
        "Nutri√ß√£o mineral e metabolismo de plantas", "Manejo integrado de plantas daninhas. Uso de herbicidas na Agricultura. Sistemas de informa√ß√£o para controle de plantas",
        "Microbiologia agr√≠cola", "Controle biol√≥gico de doen√ßas de plantas. Controle biol√≥gico de plantas daninhas. Sensoriamento remoto aplicado √† Fitopatologia",
        "Mecaniza√ß√£o agr√≠cola. Tecnologia de aplica√ß√£o de precis√£o", "Manejo da √°gua em sistemas agr√≠colas irrigados",
        "Melhoramento gen√©tico de hortali√ßas e fenotipagem de alto desempenho", "Entomologia agr√≠cola: manejo integrado, controle biol√≥gico, controle microbiano",
        "Tecnologias aplicadas √† cafeicultura"
    ]
    subareas = subareas_l1 if "Linha 1" in linha else subareas_l2

    ordem_pref = []
    ordem_usada = set()
    for sub in subareas:
        ordem = st.number_input(sub, 1, len(subareas), key=f"sub_{sub}")
        if ordem in ordem_usada:
            st.warning(f"Ordem {ordem} j√° usada.")
        ordem_usada.add(ordem)
        ordem_pref.append((ordem, sub))

# Pontua√ß√£o do Curr√≠culo
with aba3:
    st.header("Pontua√ß√£o do Curr√≠culo")
    historico_media = st.number_input("M√©dia do Hist√≥rico Escolar:", min_value=0.0, max_value=10.0, step=0.01, format="%.2f")
    historico_pdf = st.file_uploader("Hist√≥rico Escolar (PDF obrigat√≥rio)", type="pdf")

    itens = [
        ("1.1 Artigo com percentil ‚â• 75", "10,00 pts/art.", 10.0, 0),
        ("1.2 Artigo com 50 ‚â§ p < 75", "8,00 pts/art.", 8.0, 0),
        ("1.3 Artigo com 25 ‚â§ p < 50", "6,00 pts/art. M√°x: 12,00 pts", 6.0, 12.0),
        ("1.4 Artigo com p < 25", "2,00 pts/art. M√°x: 4,00 pts", 2.0, 4.0),
        ("1.5 Artigo sem percentil", "1,00 pt/art. M√°x: 2,00 pts", 1.0, 2.0),
        ("2.1 Trabalhos completos", "0,6 pt/unid. M√°x: 3,0 pts", 0.6, 3.0),
        ("2.2 Resumos publicados", "0,3 pt/unid. M√°x: 1,5 pts", 0.3, 1.5),
        ("3.1 Cap√≠tulo de livro", "1,0 pt/unid. M√°x: 4,0 pts", 1.0, 4.0),
        ("3.2 Livro na √≠ntegra", "4,0 pts/unid. M√°x: 4,0 pts", 4.0, 4.0),
        ("4. Curso de especializa√ß√£o", "1,0 pt/unid.", 1.0, 1.0),
        ("5. Monitoria", "0,6 pt/sem. M√°x: 2,4 pts", 0.6, 2.4),
        ("6.1 Inicia√ß√£o c/ bolsa", "0,4 pt/m√™s. M√°x: 16,0 pts", 0.4, 16.0),
        ("6.2 Inicia√ß√£o s/ bolsa", "0,2 pt/m√™s. M√°x: 8,0 pts", 0.2, 8.0),
        ("7.1 Software", "1,0 pt/unid. M√°x: 5,0 pts", 1.0, 5.0),
        ("7.2 Patente", "1,0 pt/unid. M√°x: 5,0 pts", 1.0, 5.0),
        ("7.3 Cultivar", "1,0 pt/unid. M√°x: 5,0 pts", 1.0, 5.0),
        ("8. Orienta√ß√£o", "1,0 pt/orient. M√°x: 2,0 pts", 1.0, 2.0),
        ("9. Bancas", "0,25 pt/unid. M√°x: 1,0 pt", 0.25, 1.0),
        ("10.1 Doc√™ncia Sup.", "1,0 pt/sem. M√°x: 8,0 pts", 1.0, 8.0),
        ("10.2 Doc√™ncia Fund/M√©dio", "0,3 pt/sem. M√°x: 3,0 pts", 0.3, 3.0),
        ("10.3 EAD", "0,2 pt/sem. M√°x: 2,0 pts", 0.2, 2.0),
        ("10.4 Ativ. profissionais", "0,25 pt/sem. M√°x: 4,0 pts", 0.25, 4.0)
    ]

    comprovantes = {}
    dados = []

    for item, desc, ponto, maximo in itens:
        st.markdown(f"**{item}** ‚Äî {desc}")
        qtd = st.number_input(f"Quantidade '{item}'", min_value=0, step=1)
        comprovantes[item] = st.file_uploader(f"Comprovante '{item}'", type="pdf", key=f"file_{item}")
        total = min(qtd * ponto, maximo) if maximo > 0 else qtd * ponto
        dados.append((item, qtd, total))

    pontuacao_total = sum(total for _, _, total in dados)
    st.subheader(f"üìà Pontua√ß√£o Final: {pontuacao_total:.2f} pontos")

    if st.button("üìÑ Gerar Relat√≥rio Final em PDF"):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        elements = []

        elements.append(Paragraph("Inscri√ß√£o e Sele√ß√£o", styles['Title']))
        elements += [
            Paragraph(f"<b>Nome:</b> {nome}", styles['Normal']),
            Paragraph(f"<b>CPF:</b> {cpf}", styles['Normal']),
            Paragraph(f"<b>Sexo:</b> {sexo}", styles['Normal']),
            Paragraph(f"<b>Modalidade:</b> {modalidade}", styles['Normal']),
            Paragraph(f"<b>Quota:</b> {quota}", styles['Normal']),
            Paragraph(f"<b>Email:</b> {email}", styles['Normal']),
            Paragraph(f"<b>Nascimento:</b> {data_nascimento.strftime('%d/%m/%Y')}", styles['Normal']),
            Paragraph(f"<b>Conclus√£o:</b> {ano_conclusao}", styles['Normal']),
            Paragraph(f"<b>Linha:</b> {linha}", styles['Normal']),
            Spacer(1, 12),
            Paragraph("<b>Sub√°reas Selecionadas:</b>", styles['Heading2'])
        ]

        sub_data = [["Ordem", "Sub√°rea"]]
        for ordem, sub in sorted(ordem_pref, key=lambda x: x[0]):
            sub_data.append([str(ordem), Paragraph(sub, ParagraphStyle(name='sub', fontSize=8))])

        sub_table = Table(sub_data, colWidths=[30, 450])
        sub_table.setStyle(TableStyle([('GRID', (0,0), (-1,-1), 0.5, colors.black), ('FONTSIZE', (0,0), (-1,-1), 8)]))
        elements.append(KeepTogether(sub_table))
        elements.append(PageBreak())

        elements.append(Paragraph("Pontua√ß√£o do Curr√≠culo", styles['Title']))
        pont_data = [["Item", "Qtd", "Total"]]
        for item, qtd, total in dados:
            pont_data.append([item, str(qtd), f"{total:.2f}"])

        pont_table = Table(pont_data, colWidths=[250, 50, 70])
        pont_table.setStyle(TableStyle([('GRID', (0,0), (-1,-1), 0.5, colors.black), ('FONTSIZE', (0,0), (-1,-1), 8)]))
        elements.append(KeepTogether(pont_table))

        elements.append(Spacer(1,12))
        elements.append(Paragraph(f"<b>M√©dia do Hist√≥rico:</b> {historico_media:.2f}", styles['Normal']))
        elements.append(Paragraph(f"<b>Pontua√ß√£o Total:</b> {pontuacao_total:.2f}", styles['Normal']))

        doc.build(elements)

        buffer.seek(0)
        merger = PdfMerger()
        merger.append(PdfReader(buffer))
        final_output = BytesIO()
        merger.write(final_output)
        merger.close()

        st.success("‚úÖ PDF gerado com sucesso!")
        st.download_button("‚¨áÔ∏è Baixar PDF Consolidado", final_output.getvalue(), file_name="formulario_ppgaig.pdf", mime="application/pdf")
