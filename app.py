import streamlit as st
import pandas as pd
import os
from io import BytesIO
from PyPDF2 import PdfMerger, PdfReader, PdfWriter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer, PageBreak
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

st.set_page_config(page_title="Formul√°rio PPGAIG", layout="wide")

# Abas do formul√°rio
aba1, aba2, aba3 = st.tabs(["Inscri√ß√£o", "Sele√ß√£o da Linha de Pesquisa", "Pontua√ß√£o do Curr√≠culo"])

# Inscri√ß√£o
with aba1:
    st.header("Inscri√ß√£o")
    nome = st.text_input("Nome completo")
    cpf = st.text_input("CPF")
    sexo = st.radio("Sexo", ["Masculino", "Feminino", "Prefiro n√£o identificar"])
    modalidade = st.radio("Modalidade", ["Regular", "Especial"])
    quota = st.selectbox("Tipo de Quota", ["Ampla Concorr√™ncia", "Pretos ou Pardos e Ind√≠genas", 
                                            "Pessoas com Defici√™ncia", 
                                            "Pol√≠ticas Humanit√°rias"])

    identidade_pdf = st.file_uploader("Documento de identidade (com CPF ou RG e CPF mesclados em um √∫nico PDF) *", type="pdf")
    registro_civil_pdf = st.file_uploader("Registro civil (nascimento ou casamento) *", type="pdf")
    quitacao_pdf = st.file_uploader("Comprovante de quita√ß√£o eleitoral *", type="pdf")
    diploma_pdf = st.file_uploader("Diploma ou Certificado de Conclus√£o da Gradua√ß√£o *", type="pdf")

    reservista_pdf = None
    if sexo == "Masculino":
        reservista_pdf = st.file_uploader("Certificado de reservista *", type="pdf")

    quota_pdf = None
    if quota != "Ampla Concorr√™ncia":
        quota_pdf = st.file_uploader("Comprovante para quotas *", type="pdf")

# Sele√ß√£o da Linha de Pesquisa
with aba2:
    st.header("Sele√ß√£o da Linha de Pesquisa")
    email = st.text_input("Email")
    from datetime import date

    data_nascimento = st.date_input("Data de Nascimento (ANO/M√äS/DIA)", value=date(1990, 1, 1), min_value=date(1900, 1, 1), max_value=date.today())
    ano_conclusao = st.number_input("Ano de Conclus√£o do Curso de Gradua√ß√£o", 1950, 2100)

    linha = st.radio("Selecione apenas 1 (uma) linha de pesquisa:", [
        "Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais",
        "Linha 2: Sistemas integrados de produ√ß√£o vegetal"
    ])

    subareas_l1 = [
        "Sensoriamento Remoto de Sistemas Agr√≠colas",
        "Desenvolvimento de sistemas de mapeamento m√≥vel. Utiliza√ß√£o de aeronaves remotamente pilotadas na Fitotecnia",
        "Sistemas computacionais inteligentes na agricultura e informa√ß√µes geoespaciais",
        "Posicionamento por GNSS. Modelagem e an√°lise de dados geoespaciais. Controle de qualidade de informa√ß√µes geoespaciais",
        "Sensores Aplicados a Agricultura de Precis√£o"
    ]

    subareas_l2 = [
        "Biotecnologia na agricultura",
        "Recursos florestais",
        "Nutri√ß√£o, Manejo e cultura de tecidos em hortali√ßas e plantas medicinais",
        "Micologia Aplicada. Patologia Florestal. Patologia de Sementes. Sensoriamento remoto aplicado √† Patologia Florestal",
        "Nutri√ß√£o mineral e metabolismo de plantas",
        "Manejo integrado de plantas daninhas. Uso de herbicidas na Agricultura. Sistemas de informa√ß√£o para controle de plantas",
        "Microbiologia agr√≠cola",
        "Controle biol√≥gico de doen√ßas de plantas. Controle biol√≥gico de plantas daninhas. Sensoriamento remoto aplicado √† Fitopatologia",
        "Mecaniza√ß√£o agr√≠cola. Tecnologia de aplica√ß√£o de precis√£o",
        "Manejo da √°gua em sistemas agr√≠colas irrigados",
        "Melhoramento gen√©tico de hortali√ßas e fenotipagem de alto desempenho",
        "Entomologia agr√≠cola: manejo integrado, controle biol√≥gico, controle microbiano",
        "Tecnologias aplicadas √† cafeicultura"
    ]

    subareas = subareas_l1 if "Linha 1" in linha else subareas_l2

    ordem_pref = []
    ordem_usada = set()
    for sub in subareas:
        ordem = st.number_input(sub, 1, len(subareas), key=f"sub_{sub}")
        if ordem in ordem_usada:
            st.warning(f"Ordem {ordem} j√° usada. Escolha uma ordem √∫nica para cada sub√°rea.")
        ordem_usada.add(ordem)
        ordem_pref.append(ordem)

# Pontua√ß√£o do Curr√≠culo
with aba3:
    st.header("Pontua√ß√£o do Curr√≠culo")

    st.markdown("üìù **Aten√ß√£o:** Os comprovantes de um dado item devem ser enviados em **um √∫nico arquivo PDF**. Por exemplo, se voc√™ tem dois artigos referentes ao item 1.1, estes devem ser mesclados em **um √∫nico arquivo PDF** a ser enviado para o item 1.1.")
    st.markdown("### Hist√≥rico Escolar do(a) Candidato(a)")
    historico_media = st.number_input("M√©dia aritm√©tica das disciplinas cursadas na gradua√ß√£o:", min_value=0.0, max_value=10.0, step=0.01, format="%.2f")
    historico_pdf = st.file_uploader("Anexe o Hist√≥rico Escolar (PDF obrigat√≥rio)", type="pdf", key="historico")

    data = [
        ["1.1 Artigo com percentil ‚â• 75", 10.0, 0],
        ["1.2 Artigo com 50 ‚â§ percentil < 75", 8.0, 0],
        ["1.3 Artigo com 25 ‚â§ percentil < 50", 6.0, 12.0],
        ["1.4 Artigo com percentil < 25", 2.0, 4.0],
        ["1.5 Artigo sem percentil", 1.0, 2.0],
        ["2.1 Trabalhos completos em eventos (‚â•2p)", 0.6, 3.0],
        ["2.2 Resumos publicados (<2p)", 0.3, 1.5],
        ["3.1 Cap√≠tulo de livro ou boletim t√©cnico", 1.0, 4.0],
        ["3.2 Livro na √≠ntegra", 4.0, 4.0],
        ["4. Curso de especializa√ß√£o (min 320h)", 1.0, 1.0],
        ["5. Monitoria de disciplina", 0.6, 2.4],
        ["6.1 Inicia√ß√£o cient√≠fica com bolsa", 0.4, 16.0],
        ["6.2 Inicia√ß√£o cient√≠fica sem bolsa", 0.2, 8.0],
        ["7.1 Software/Aplicativo (INPI)", 1.0, 5.0],
        ["7.2 Patente (INPI)", 1.0, 5.0],
        ["7.3 Registro de cultivar (MAPA)", 1.0, 5.0],
        ["8. Orienta√ß√£o de alunos (IC/TCC/extens√£o)", 1.0, 2.0],
        ["9. Participa√ß√£o em bancas (TCC/especializa√ß√£o)", 0.25, 1.0],
        ["10.1 Doc√™ncia no Ensino Superior", 1.0, 8.0],
        ["10.2 Doc√™ncia no Fundamental/M√©dio", 0.3, 3.0],
        ["10.3 Atua√ß√£o em EAD", 0.2, 2.0],
        ["10.4 Atividades profissionais relacionadas", 0.25, 4.0],
    ]

    df = pd.DataFrame(data, columns=["Item", "Pontua√ß√£o por Item", "Pontua√ß√£o M√°xima"])
    df["Quantidade"] = 0
    df["Total"] = 0.0
    comprovantes = {}

    for i in range(len(df)):
        item = df.at[i, "Item"]
        ponto = df.at[i, "Pontua√ß√£o por Item"]
        maximo = df.at[i, "Pontua√ß√£o M√°xima"]
        if maximo > 0:
            max_qtd = round(maximo / ponto)
        else:
            max_qtd = 999
        col1, col2 = st.columns([3, 2])
        with col1:
            df.at[i, "Quantidade"] = st.number_input(f"{item}", min_value=0, max_value=max_qtd, step=1, key=f"qtd_{i}")
        with col2:
            comprovantes[item] = st.file_uploader(f"Comprovante √∫nico em PDF de '{item}'", type="pdf", key=f"file_{i}")

    for i in range(len(df)):
        if df.at[i, "Quantidade"] > 0 and comprovantes[df.at[i, "Item"]] is None:
            st.warning(f"Voc√™ preencheu o item '{df.at[i, 'Item']}', mas n√£o anexou o comprovante correspondente. Isso √© obrigat√≥rio.")

    df["Total"] = df["Quantidade"] * df["Pontua√ß√£o por Item"]
    pontuacao_total = df["Total"].sum()
    st.subheader(f"üìà Pontua√ß√£o Final: {pontuacao_total:.2f} pontos")

    if st.button("üìÑ Gerar Relat√≥rio Final em PDF"):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=40, leftMargin=40, topMargin=40, bottomMargin=40)
        styles = getSampleStyleSheet()
        elements = []

        # Se√ß√£o 1: Inscri√ß√£o
        elements.append(Paragraph("Inscri√ß√£o", styles['Title']))
        elements.append(Spacer(1, 12))
        elements += [
            Paragraph(f"<b>Nome:</b> {nome}", styles['Normal']),
            Paragraph(f"<b>CPF:</b> {cpf}", styles['Normal']),
            Paragraph(f"<b>Sexo:</b> {sexo}", styles['Normal']),
            Paragraph(f"<b>Modalidade:</b> {modalidade}", styles['Normal']),
            Paragraph(f"<b>Quota:</b> {quota}", styles['Normal']),
        ]

        elements.append(PageBreak())

        # Se√ß√£o 2: Linha de Pesquisa
        elements.append(Paragraph("Sele√ß√£o da Linha de Pesquisa", styles['Title']))
        elements.append(Spacer(1, 12))
        elements += [
            Paragraph(f"<b>Email:</b> {email}", styles['Normal']),
            Paragraph(f"<b>Data de Nascimento:</b> {data_nascimento.strftime('%d/%m/%Y')}", styles['Normal']),
            Paragraph(f"<b>Ano de Conclus√£o:</b> {ano_conclusao}", styles['Normal']),
            Paragraph(f"<b>Linha Selecionada:</b> {linha}", styles['Normal']),
        ]
        subarea_table = Table([["Sub√°rea", "Ordem"]] + list(zip(subareas, ordem_pref)), colWidths=[440, 60])
        subarea_table.setStyle(TableStyle([
            ('GRID', (0,0), (-1,-1), 0.5, colors.black),
            ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
            ('ALIGN', (1,1), (-1,-1), 'CENTER')
        ]))
        elements.append(Spacer(1, 12))
        elements.append(subarea_table)

        elements.append(PageBreak())

        # Se√ß√£o 3: Pontua√ß√£o
        elements.append(Paragraph("Pontua√ß√£o do Curr√≠culo", styles['Title']))
        elements.append(Spacer(1, 12))
        pont_table = Table(
            [["Item", "Quantidade", "Total"]] + df[df["Quantidade"] > 0][["Item", "Quantidade", "Total"]].values.tolist(),
            colWidths=[350, 70, 70]
        )
        pont_table.setStyle(TableStyle([
            ('GRID', (0,0), (-1,-1), 0.5, colors.black),
            ('BACKGROUND', (0,0), (-1,0), colors.grey),
            ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke)
        ]))
        elements.append(pont_table)
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"<b>M√©dia do Hist√≥rico Escolar:</b> {historico_media:.2f}", styles['Normal']))
        elements.append(Paragraph(f"<b>Pontua√ß√£o Total do Curr√≠culo:</b> {pontuacao_total:.2f} pontos", styles['Normal']))

        doc.build(elements)
        st.success("‚úÖ PDF gerado com sucesso!")
        st.download_button("‚¨áÔ∏è Baixar PDF Consolidado", buffer.getvalue(), file_name="formulario_ppgaig.pdf", mime="application/pdf")
