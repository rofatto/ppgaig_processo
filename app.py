import streamlit as st
import pandas as pd
import json
from io import BytesIO
from PyPDF2 import PdfMerger, PdfReader
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

st.set_page_config(page_title="Formul√°rio PPGAIG", layout="wide")

# ‚û°Ô∏è Carregar progresso
uploaded_progress = st.file_uploader("üìÇ Carregar Progresso (JSON)", type="json")
if uploaded_progress:
    saved_data = json.load(uploaded_progress)
    st.session_state.update(saved_data)
    st.warning("‚ö†Ô∏è Progresso carregado! Por favor, **reenvie os arquivos PDF** antes de gerar o relat√≥rio.")

# Abas do formul√°rio
aba1, aba2, aba3 = st.tabs(["Inscri√ß√£o", "Sele√ß√£o da Linha de Pesquisa", "Pontua√ß√£o do Curr√≠culo"])

# Inscri√ß√£o
with aba1:
    st.header("Inscri√ß√£o")
    nome = st.text_input("Nome completo", st.session_state.get('nome', ''))
    cpf = st.text_input("CPF", st.session_state.get('cpf', ''))
    sexo = st.radio("Sexo", ["Masculino", "Feminino", "Prefiro n√£o identificar"], index=["Masculino", "Feminino", "Prefiro n√£o identificar"].index(st.session_state.get('sexo', "Masculino")))
    modalidade = st.radio("Modalidade", ["Regular", "Especial"], index=["Regular", "Especial"].index(st.session_state.get('modalidade', "Regular")))
    quota = st.selectbox("Tipo de Quota", ["Ampla Concorr√™ncia", "Pretos, Pardos, Ind√≠genas", "Pessoas com Defici√™ncia", "Pessoas sob pol√≠ticas humanit√°rias no Brasil"], index=["Ampla Concorr√™ncia", "Pretos, Pardos, Ind√≠genas", "Pessoas com Defici√™ncia", "Pessoas sob pol√≠ticas humanit√°rias no Brasil"].index(st.session_state.get('quota', "Ampla Concorr√™ncia")))
# Campo adicional: Candidato a bolsa
    if modalidade == "Regular":
    candidato_bolsa = st.radio(
        "Deseja concorrer √† bolsa?",
        ["Sim", "N√£o"],
        index=["Sim", "N√£o"].index(st.session_state.get('candidato_bolsa', "Sim"))
    )
else:
    candidato_bolsa = "N√£o"  # Aluno especial n√£o pode concorrer a bolsa
    st.session_state['candidato_bolsa'] = candidato_bolsa  # Garante que sempre fique "N√£o"

    identidade_pdf = st.file_uploader("Documento de identidade (com CPF ou RG e CPF separados, mas mesclados em um √∫nico PDF) *", type="pdf")
    registro_civil_pdf = st.file_uploader("Registro civil (nascimento ou casamento) *", type="pdf")
    quitacao_pdf = st.file_uploader("Comprovante de quita√ß√£o eleitoral *", type="pdf")
    diploma_pdf = st.file_uploader("Diploma ou Certificado de Conclus√£o da Gradua√ß√£o *", type="pdf")

    reservista_pdf = None
    if sexo == "Masculino":
        reservista_pdf = st.file_uploader("Certificado de reservista *", type="pdf")

    quota_pdf = None
    if quota != "Ampla Concorr√™ncia":
        quota_pdf = st.file_uploader("Comprovante para quotas *", type="pdf")

# Sele√ß√£o da Linha de Pesquisa
with aba2:
    st.header("Sele√ß√£o da Linha de Pesquisa")
    email = st.text_input("Email", st.session_state.get('email', ''))
    from datetime import date
    data_nascimento = st.date_input("Data de Nascimento (ANO/M√äS/DIA)", value=pd.to_datetime(st.session_state.get('data_nascimento', '1990-01-01')), min_value=date(1900, 1, 1), max_value=date.today())
    ano_conclusao = st.number_input("Ano de Conclus√£o do Curso de Gradua√ß√£o", 1950, 2100, value=st.session_state.get('ano_conclusao', 2024))

    linha = st.radio("Selecione apenas 1 (uma) linha de pesquisa:", ["Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais", "Linha 2: Sistemas integrados de produ√ß√£o vegetal"], index=["Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais", "Linha 2: Sistemas integrados de produ√ß√£o vegetal"].index(st.session_state.get('linha', "Linha 1: Desenvolvimento e aplica√ß√µes de m√©todos em informa√ß√µes geoespaciais")))

    st.markdown("""
    üìù **Classifique as sub√°reas por ordem de prefer√™ncia:**
    - Utilize os bot√µes ‚Äú+‚Äù e ‚Äú‚Äì‚Äù para atribuir uma ordem de **1 (maior interesse)** a **5 (menor interesse)** ‚Äì *caso tenha selecionado a Linha 1*.
    - Caso tenha selecionado a Linha 2, a ordem vai de **1 (maior interesse) a 13 (menor interesse)**.
    - Cada n√∫mero de ordem s√≥ pode ser usado uma vez.
    """)

    subareas_l1 = [
        "Sensoriamento Remoto de Sistemas Agr√≠colas",
        "Desenvolvimento de sistemas de mapeamento m√≥vel. Utiliza√ß√£o de aeronaves remotamente pilotadas na Fitotecnia",
        "Sistemas computacionais inteligentes na agricultura e informa√ß√µes geoespaciais",
        "Posicionamento por GNSS. Modelagem e an√°lise de dados geoespaciais. Controle de qualidade de informa√ß√µes geoespaciais",
        "Sensores Aplicados a Agricultura de Precis√£o"
    ]

    subareas_l2 = [
        "Biotecnologia na agricultura",
        "Recursos florestais",
        "Nutri√ß√£o, Manejo e cultura de tecidos em hortali√ßas e plantas medicinais",
        "Micologia Aplicada. Patologia Florestal. Patologia de Sementes. Sensoriamento remoto aplicado √† Patologia Florestal",
        "Nutri√ß√£o mineral e metabolismo de plantas",
        "Manejo integrado de plantas daninhas. Uso de herbicidas na Agricultura. Sistemas de informa√ß√£o para controle de plantas",
        "Microbiologia agr√≠cola",
        "Controle biol√≥gico de doen√ßas de plantas. Controle biol√≥gico de plantas daninhas. Sensoriamento remoto aplicado √† Fitopatologia",
        "Mecaniza√ß√£o agr√≠cola. Tecnologia de aplica√ß√£o de precis√£o",
        "Manejo da √°gua em sistemas agr√≠colas irrigados",
        "Melhoramento gen√©tico de hortali√ßas e fenotipagem de alto desempenho",
        "Entomologia agr√≠cola: manejo integrado, controle biol√≥gico, controle microbiano",
        "Tecnologias aplicadas √† cafeicultura"
    ]

    subareas = subareas_l1 if "Linha 1" in linha else subareas_l2

    # ‚û°Ô∏è Carregar ordem das sub√°reas
    saved_ordem_list = st.session_state.get('ordem_pref', [])
    saved_ordem = {sub: ordem for ordem, sub in saved_ordem_list}
    
    ordem_pref = []
    ordem_usada = set()
    for sub in subareas:
        ordem = st.number_input(sub, 1, len(subareas), key=f"sub_{sub}", value=saved_ordem.get(sub, 1))
        if ordem in ordem_usada:
            st.warning(f"Ordem {ordem} j√° usada. Escolha uma ordem √∫nica para cada sub√°rea.")
        ordem_usada.add(ordem)
        ordem_pref.append((ordem, sub))

# Pontua√ß√£o do Curr√≠culo
with aba3:
    st.header("Pontua√ß√£o do Curr√≠culo")
    st.markdown("üìù **Aten√ß√£o:** Os comprovantes de um dado item devem ser enviados em **um √∫nico arquivo PDF**.")
    historico_media = st.number_input("M√©dia aritm√©tica das disciplinas cursadas na gradua√ß√£o (obrigat√≥rio):", min_value=0.01, max_value=10.0, step=0.01, format="%.2f", value=st.session_state.get('historico_media', 1.00))  # ou outro valor padr√£o
    historico_pdf = st.file_uploader("Anexe o Hist√≥rico Escolar (PDF obrigat√≥rio)", type="pdf", key="historico")

    itens = [
        ("1.1 Artigo com percentil ‚â• 75", "10,00 pontos/artigo.", 10.0, 0),
        ("1.2 Artigo com 50 ‚â§ percentil < 75", "8,00 pontos/artigo.", 8.0, 0),
        ("1.3 Artigo com 25 ‚â§ percentil < 50", "6,00 pontos/artigo. M√°x: 12,00 pontos.", 6.0, 12.0),
        ("1.4 Artigo com percentil < 25", "2,00 pontos/artigo. M√°x: 4,00 pontos.", 2.0, 4.0),
        ("1.5 Artigo sem percentil", "1,00 ponto/artigo. M√°x: 2,00 pontos.", 1.0, 2.0),
        ("2.1 Trabalhos completos em eventos (‚â• 2 p√°ginas)", "0,6 ponto/unidade. M√°x: 3,0 pontos.", 0.6, 3.0),
        ("2.2 Resumos publicados (< 2 p√°ginas)", "0,3 ponto/unidade. M√°x: 1,5 pontos.", 0.3, 1.5),
        ("3.1 Cap√≠tulo de livro ou boletim t√©cnico", "1,0 ponto/unidade. M√°x: 4,0 pontos.", 1.0, 4.0),
        ("3.2 Livro na √≠ntegra", "4,0 pontos/unidade. M√°x: 4,0 pontos.", 4.0, 4.0),
        ("4. Curso de especializa√ß√£o", "1,0 ponto/unidade. M√°x: 1,0 ponto.", 1.0, 1.0),
        ("5. Monitoria de disciplina", "0,6 ponto/semestre. M√°x: 2,4 pontos.", 0.6, 2.4),
        ("6.1 Inicia√ß√£o cient√≠fica com bolsa", "0,4 ponto/m√™s. M√°x: 16,0 pontos.", 0.4, 16.0),
        ("6.2 Inicia√ß√£o cient√≠fica sem bolsa", "0,2 ponto/m√™s. M√°x: 8,0 pontos.", 0.2, 8.0),
        ("7.1 Software/Aplicativo", "1,0 ponto/unidade. M√°x: 5,0 pontos.", 1.0, 5.0),
        ("7.2 Patente", "1,0 ponto/unidade. M√°x: 5,0 pontos.", 1.0, 5.0),
        ("7.3 Registro de cultivar", "1,0 ponto/unidade. M√°x: 5,0 pontos.", 1.0, 5.0),
        ("8. Orienta√ß√£o de alunos", "1,0 ponto por orienta√ß√£o. M√°x: 2,0 pontos.", 1.0, 2.0),
        ("9. Participa√ß√£o em bancas", "0,25 ponto/unidade. M√°x: 1,0 ponto.", 0.25, 1.0),
        ("10.1 Doc√™ncia no Ensino Superior", "1,0 ponto/semestre. M√°x: 8,0 pontos.", 1.0, 8.0),
        ("10.2 Doc√™ncia no Fundamental/M√©dio", "0,3 ponto/semestre. M√°x: 3,0 pontos.", 0.3, 3.0),
        ("10.3 Atua√ß√£o em EAD", "0,2 ponto/semestre. M√°x: 2,0 pontos.", 0.2, 2.0),
        ("10.4 Atividades profissionais relacionadas", "0,25 ponto/semestre. M√°x: 4,0 pontos.", 0.25, 4.0)
    ]

    saved_pontuacao = st.session_state.get('pontuacao', {})
    
    comprovantes = {}
    dados = []

    for item, desc, ponto, maximo in itens:
        st.markdown(f"**{item}** ‚Äî {desc}")
        qtd = st.number_input(f"Quantidade de '{item}'", min_value=0, step=1, value=saved_pontuacao.get(item, 0))
        comprovantes[item] = st.file_uploader(f"Anexe o comprovante √∫nico em PDF para '{item}'", type="pdf", key=f"file_{item}")
        if qtd > 0 and comprovantes[item] is None:
            st.warning(f"Preencheu '{item}' com quantidade {qtd}, mas n√£o anexou o comprovante.")
        total = min(qtd * ponto, maximo) if maximo > 0 else qtd * ponto
        dados.append((item, qtd, total))

    pontuacao_total = sum(total for _, _, total in dados)

    st.subheader(f"üìà Pontua√ß√£o Final: {pontuacao_total:.2f} pontos")

      # ‚úÖ Bot√£o salvar progresso COMPLETO
    save_data = {
        'nome': nome,
        'cpf': cpf,
        'sexo': sexo,
        'modalidade': modalidade,
        'quota': quota,
        'candidato_bolsa': candidato_bolsa,
        'email': email,
        'data_nascimento': str(data_nascimento),
        'ano_conclusao': ano_conclusao,
        'linha': linha,
        'ordem_pref': ordem_pref,
        'historico_media': historico_media,
        'pontuacao': {item: qtd for item, qtd, _ in dados}
    }

    b = BytesIO()
    b.write(json.dumps(save_data, indent=2, ensure_ascii=False).encode('utf-8'))
    st.download_button("üíæ Salvar Progresso", b.getvalue(), "progresso_ppgaig.json", mime="application/json")


    # ‚úÖ Valida√ß√£o das ordens antes do bot√£o PDF
    ordens = [ordem for ordem, _ in ordem_pref]
    if len(ordens) != len(set(ordens)):
        st.error("‚ùó H√° ordens repetidas nas sub√°reas! Por favor, atribua uma ordem √∫nica para cada sub√°rea.")
    else:
        if st.button("üìÑ Gerar Relat√≥rio Final em PDF"):
            if not historico_pdf:
                st.error("‚ùó Hist√≥rico Escolar obrigat√≥rio n√£o foi anexado.")
            elif not all([identidade_pdf, registro_civil_pdf, quitacao_pdf, diploma_pdf]):
                st.error("‚ùó Todos documentos obrigat√≥rios da inscri√ß√£o devem ser anexados.")
            else:
                buffer = BytesIO()
                doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=40, leftMargin=40, topMargin=40, bottomMargin=40)
                styles = getSampleStyleSheet()
                elements = []

                elements.append(Paragraph("Inscri√ß√£o", styles['Title']))
                elements += [Paragraph(f"<b>{label}:</b> {valor}", styles['Normal']) for label, valor in [
                    ("Nome", nome), ("CPF", cpf), ("Sexo", sexo), ("Modalidade", modalidade), ("Quota", quota), ("Candidato √† Bolsa", candidato_bolsa),
                    ("Email", email), ("Data de Nascimento", data_nascimento.strftime('%d/%m/%Y')),
                    ("Ano de Conclus√£o", ano_conclusao), ("Linha Selecionada", linha)
                ]]

                elements.append(Spacer(1, 12))
                elements.append(Paragraph("Sub√°reas Selecionadas", styles['Heading2']))
                subareas_tab = sorted(ordem_pref, key=lambda x: x[0])
                table_data = [["Ordem", "Sub√°rea"]] + [
                    [ordem, Paragraph(sub, ParagraphStyle('subarea', fontSize=9))] for ordem, sub in subareas_tab
                ]
                table = Table(table_data, colWidths=[50, 400])
                table.setStyle(TableStyle([
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('WORDWRAP', (1, 1), (-1, -1), 'CJK'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP')
                ]))
                elements.append(table)
                elements.append(PageBreak())

                elements.append(Paragraph("Pontua√ß√£o do Curr√≠culo", styles['Title']))
                table_data = [["Item", "Quantidade", "Total"]] + [
                    [Paragraph(item, ParagraphStyle('item', fontSize=8)), qtd, f"{total:.2f}"] for item, qtd, total in dados
                ]
                pont_table = Table(table_data, colWidths=[300, 70, 70])
                pont_table.setStyle(TableStyle([
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                    ('WORDWRAP', (0, 1), (0, -1), 'CJK')
                ]))
                elements.append(pont_table)

                elements.append(Spacer(1, 12))
                elements.append(Paragraph(f"M√©dia do Hist√≥rico Escolar: {historico_media:.2f}", styles['Normal']))
                elements.append(Paragraph(f"Pontua√ß√£o Total do Curr√≠culo: {pontuacao_total:.2f}", styles['Normal']))

                doc.build(elements)
                buffer.seek(0)
                merger = PdfMerger()
                merger.append(PdfReader(buffer))

                for label, pdf_file in [
                    ("Documento de identidade", identidade_pdf), ("Registro civil", registro_civil_pdf),
                    ("Comprovante de quita√ß√£o eleitoral", quitacao_pdf), ("Diploma ou Certificado", diploma_pdf),
                    ("Certificado de reservista", reservista_pdf), ("Comprovante de quota", quota_pdf),
                    ("Hist√≥rico Escolar", historico_pdf)
                ]:
                    if pdf_file:
                        capa_buffer = BytesIO()
                        SimpleDocTemplate(capa_buffer, pagesize=A4).build(
                            [Spacer(1, 250), Paragraph(label, styles['Title'])]
                        )
                        capa_buffer.seek(0)
                        merger.append(PdfReader(capa_buffer))
                        pdf_file.seek(0)
                        merger.append(PdfReader(pdf_file))

                for item, qtd, _ in dados:
                    if qtd > 0 and comprovantes[item]:
                        capa_buffer = BytesIO()
                        SimpleDocTemplate(capa_buffer, pagesize=A4).build(
                            [Spacer(1, 250), Paragraph(f"Comprovante: {item}", styles['Title'])]
                        )
                        capa_buffer.seek(0)
                        merger.append(PdfReader(capa_buffer))
                        comprovantes[item].seek(0)
                        merger.append(PdfReader(comprovantes[item]))

                final_output = BytesIO()
                merger.write(final_output)
                merger.close()
                st.success("‚úÖ PDF gerado com sucesso!")
                st.download_button("‚¨áÔ∏è Baixar PDF Consolidado", final_output.getvalue(), file_name="formulario_ppgaig.pdf", mime="application/pdf")
